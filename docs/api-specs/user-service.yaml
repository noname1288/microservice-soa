openapi: 3.0.0
info:
  title: User Service API
  version: 1.0.0
servers:
  - url: http://localhost:8081/api/users
    description: Localhost User Service

paths:
  /register:
    post:
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestCreateUser'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '409':
          description: User already exists

  /login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestLogin'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
        '401':
          description: Invalid credentials

  /refreshtoken:
    post:
      summary: Refresh JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestRefresh'
      responses:
        '200':
          description: New token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: Invalid or expired refresh token

  /validate:
    post:
      summary: Validate access token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestValidate'
      responses:
        '200':
          description: Token validation result
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  username:
                    type: string

  /list-member:
    post:
      summary: Get list of users by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                listIdUser:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  members:
                    type: array
                    items:
                      $ref: '#/components/schemas/ResponseMember'

  /all-user:
    get:
      summary: Get all users
      responses:
        '200':
          description: All user list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/ResponseMember'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RequestLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string

    RequestRefresh:
      type: object
      properties:
        refreshToken:
          type: string

    RequestValidate:
      type: object
      properties:
        token:
          type: string

    RequestCreateUser:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        username:
          type: string
        password:
          type: string

    ResponseMember:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string

    User:
      allOf:
        - $ref: '#/components/schemas/ResponseMember'
        - type: object
          properties:
            username:
              type: string

security:
  - BearerAuth: []
